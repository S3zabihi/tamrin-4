import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.layers import Input, Dense, Reshape, Flatten
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import LeakyReLU
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import Adam

# تنظیمات
img_rows = 28
img_cols = 28
channels = 1
img_shape = (img_rows, img_cols, channels)

# تعریف مولد
def build_generator():
    model = Sequential()

    model.add(Dense(128 * 7 * 7, activation="relu", input_dim=100))
    model.add(Reshape((7, 7, 128)))
    model.add(BatchNormalization(momentum=0.8))
    model.add(LeakyReLU(alpha=0.2))

    model.add(Conv2DTranspose(64, kernel_size=3, strides=2, padding="same"))
    model.add(BatchNormalization(momentum=0.8))
    model.add(LeakyReLU(alpha=0.2))

    model.add(Conv2DTranspose(1, kernel_size=3, strides=2, padding="same", activation="tanh"))
    model.summary()

    noise = Input(shape=(100,))
    img = model(noise)

    return Model(noise, img)

# تعریف تمیزکننده
def build_discriminator():
    model = Sequential()

    model.add(Conv2D(32, kernel_size=3, strides=2, input_shape=img_shape, padding="same"))
    model.add(LeakyReLU(alpha=0.2))

    model.add(Conv2D(64, kernel_size=3, strides=2, padding="same"))
    model.add(LeakyReLU(alpha=0.2))

    model.add(Conv2D(128, kernel_size=3, strides=2, padding="same"))
    model.add(LeakyReLU(alpha=0.2))

    model.add(Flatten())
    model.add(Dense(1, activation='sigmoid'))
    model.summary()

    img = Input(shape=img_shape)
    validity = model(img)

    return Model(img, validity)

# آموزش GAN
def train(epochs, batch_size, sample_interval):
    # بارگذاری داده‌های MNIST
    (X_train, _), (_, _) = mnist.load_data()

    # انتخاب تصاویر حاوی رقم ۷
    X_train = X_train[np.where(_ == 7)[0]]

    
# نرمال‌سازی تصاویر X_train = (X_train.astype(np.float32) - 127.5) / 127.5 X_train = np.expand_dims(X_train, axis=3) half_batch = int(batch_size / 2) # ساخت شبکه‌های متخاصم generator = build_generator() discriminator = build_discriminator() # تنظیمات شبکه discriminator

# ساخت مولد و تمیزکننده
generator = build_generator()
discriminator = build_discriminator()

# تنظیم شبکه‌ها
discriminator.compile(loss='binary_crossentropy',
                      optimizer=Adam(0.0002, 0.5),
                      metrics=['accuracy'])

z = Input(shape=(100,))
img = generator(z)
validity = discriminator(img)

combined = Model(z, validity)
combined.compile(loss='binary_crossentropy',
                 optimizer=Adam(0.0002, 0.5))

# آموزش شبکه‌ها
for epoch in range(epochs):
    # آموزش تمیزکننده
    idx = np.random.randint(0, X_train.shape[0], half_batch)
    imgs = X_train[idx]

    noise = np.random.normal(0, 1, (half_batch, 100))
    gen_imgs = generator.predict(noise)

    d_loss_real = discriminator.train_on_batch(imgs, np.ones((half_batch, 1)))
    d_loss_fake = discriminator.train_on_batch(gen_imgs, np.zeros((half_batch, 1)))
    d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

    # آموزش مولد
    noise = np.random.normal(0, 1, (batch_size, 100))
    valid_y = np.array([1] * batch_size)

    g_loss = combined.train_on_batch(noise, valid_y)

    # نمایش پیشرفت
    if epoch % sample_interval == 0:
        print(f"Epoch {epoch}/{epochs}, D_loss={d_loss[0]:.4f}, G_loss={g_loss:.4f}")
